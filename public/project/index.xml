<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Sascha-Dominic Schnug</title>
    <link>/project/</link>
    <description>Recent content in Projects on Sascha-Dominic Schnug</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2018</copyright>
    <lastBuildDate>Wed, 27 Apr 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>pyMIQP</title>
      <link>/project/pymiqp/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/pymiqp/</guid>
      <description>Summary This is a Mixed Integer Quadratic Programming solver for python exploiting sparsity.
The core-concept is to implement an efficient bridge from the canonical Convex Quadratic Programming optimization problem to the more general MINLP formulation used by Bonmin.
More information is available at the project-page.
Interface There is a pull-request including a complete interface to be used with cvxpy&amp;rsquo;s 1.0 branch. This code also includes tests.</description>
    </item>
    
    <item>
      <title>pylinassignment</title>
      <link>/project/pylinassignment/</link>
      <pubDate>Sun, 11 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/project/pylinassignment/</guid>
      <description>Summary This is a proof-of-concept (rectangular) linear-assignment problem solver based on Coin-OR&amp;rsquo;s Lemon and it&amp;rsquo;s Network-Simplex algorithm.
The basic idea is to formulate the (rectangular) linear-assignment problem as minimum-cost-flow problem (through bipartite matching) and use high-quality software available (although theoretically the latter problem is harder than the original problem).
More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>pyVideoPartialCopyDetector</title>
      <link>/project/videopartialcopydetector/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/videopartialcopydetector/</guid>
      <description>Summary This is an experimental-code based on perceptual-hashing (partially done in cython to increase speed) and CoinOR&amp;rsquo;s Lemon whose Network-simplex algorithm is used to solve min-cost max-flow algorithms for temporal-matching of frames.
The Lemon-part is dependent on my small pybind11/C++-based wrapper pyLemonFlow.
Demo-output comparing two different versions of a movie-trailer (eng vs. ger animations; different intros):

More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>pycadical</title>
      <link>/project/pycadical/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/pycadical/</guid>
      <description>Summary This is a simple wrapper for the CaDiCaL SAT-solver by Armin Biere using pybind11.
More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>nnls_sbb</title>
      <link>/project/nnls_sbb/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/nnls_sbb/</guid>
      <description>Summary Prototype implementation of:
 Kim, Dongmin, Suvrit Sra, and Inderjit S. Dhillon. &amp;ldquo;A non-monotonic method for large-scale nonnegative least squares.&amp;rdquo; (2010).
 More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>scipy_lp_dev</title>
      <link>/project/scipy_lp_dev/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/scipy_lp_dev/</guid>
      <description>Summary This benchmark was done to compare robustness/performance of scipy&amp;rsquo;s LP-solvers and some own deprecated IPM-implementation.
More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>kemeny_ranking</title>
      <link>/project/kemeny_ranking/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/kemeny_ranking/</guid>
      <description>Summary This is an efficient MIP-formulation of the Kemeny Score Rank Aggregation problem, which might also serve as additional documentation/example for the usage of cylp (which has very sparse documentation).
More information is available at the project-page.</description>
    </item>
    
    <item>
      <title>footrule_ranking</title>
      <link>/project/footrule_ranking/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>/project/footrule_ranking/</guid>
      <description>Summary This is an LP-formulation for the Footrule Score Rank Aggregation problem, which might also serve as additional documentation/example for the usage of cylp (which has very sparse documentation). It&amp;rsquo;s somewhat comparable to my kemeny_ranking project, but instead of Mixed-integer programming, Linear-programming is used. It&amp;rsquo;s also less optimized in terms of model-creation.
More information is available at the project-page.</description>
    </item>
    
  </channel>
</rss>